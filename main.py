v_d_list = []  # Создаем пустой список, куда позже будем добавлять информацию из отчета СК в структуре: [VIN, повреждения]

v_ch_list = []  # Создаем пустой список, куда позже будем добавлять VIN-номера ТС, по которым необходимо проверить повреждения


# Открываем созданный макросом текстовый файл, куда записаны повреждения для каждого страхового события по каждому ТС
with open(r"V:\Hyundai Mobility\Outgoing\Копии документов ТС\УБЫТКИ\Учет убытков\Сверка с ВСК\Выгрузка_убытков\all_damages.txt") as vins_damages:

    for line in vins_damages:  # добавляем каждую строку файла в список, используя в кач-ве разделителя символ табуляции
        line = line.upper().strip().split('\t')
        v_d_list.append(line)

    # print(v_d_list)
    # print()

    for el in v_d_list:  # Строка с повреждениями по некоторым ТС имеет в начале двойные кавычки, которые заменяем на отсутствие символа
        el[1] = el[1].replace('"', '')

    # print(v_d_list)
    # print()

    vins_damages_list = []  # Создаем список, который будем заполнять создаваемыми в цикле словарями, где ключами являются слова
    # VIN и DAMAGES, а значениями ключей VIN-номер и повреждения соответственно (см. цикл ниже)

    for pair in v_d_list:
        v_d_dict = {'VIN': pair[0], 'DAMAGES': pair[1]}
        vins_damages_list.append(v_d_dict)

    # print(vins_damages_list)
    # print()

    # Открываем текстовый файл, куда в цикле записываем VIN-номера ТС, по которым необходимо проверить повреждения

    with open(r"V:\Hyundai Mobility\Outgoing\Копии документов ТС\УБЫТКИ\Учет убытков\Сверка с ВСК\Выгрузка_убытков\vins_for_checking.txt", encoding='utf8') as vins_for_checking:

        for line in vins_for_checking:
            line = line.upper().strip()
            v_ch_list.append(line)

        # print(v_ch_list)
        # print()

        v_ch_dict = {}  # Создаем пустой словарь, куда циклом будем записывать проверяемые VIN-номера в качестве ключа и
        # пустой список в кач-ве значения
        for vin in v_ch_list:
            v_ch_dict[vin] = []

        # print(v_ch_dict)
        # print()

        # В двойном цикле перебираем эл-ты словаря v_ch_dict и элементы списка словарей vins_damages_list. Если VIN-номер,
        # который необходимо проверить, встречается в списке словарей (т.е. является значением ключа VIN), добавляем
        # повреждения из списка словарей (т.е. значения ключа DAMAGES) в значения словаря v_ch_dict (они являются списком,
        # поэтому используем append)
        for vin, damages in v_ch_dict.items():
            for dict_ in vins_damages_list:
                if vin == dict_['VIN']:
                    damages.append(dict_['DAMAGES'])

        # Если список с повреждениями остается пустым, то есть проверяемый VIN-номер не встречается в отчете СК, добавляем
        # в этот список комментарий, что убытков (страховых событий) нет
        for vin, damages in v_ch_dict.items():
            if not damages:
                damages.append('убытков_нет')

        # print(v_ch_dict)
        # print()

        # Открываем созданный текстовый файл, который используется для вывода информации, и в цикле записываем туда данные в
        # требуемой структуре. VIN-номер и повреждения по каждому страховому событию записываются через символ §,
        # который будет использоваться как разделитель строк при импорте текстового файла в Excel при помощи макроса
        with open(r"V:\Hyundai Mobility\Outgoing\Копии документов ТС\УБЫТКИ\Учет убытков\Сверка с ВСК\Выгрузка_убытков\input.txt", 'w', encoding='utf8') as input:

            for vin, damages in v_ch_dict.items():
                input.write(f"{vin}§{'§'.join(damages)} \n")

print(r"Убытки найдены. Откройте файл Все_убытки.xls и выполните третий макрос")

